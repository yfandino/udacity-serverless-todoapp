service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-dynamodb-local
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 8080
    useChildProcesses: true
  dynamodb:
    start:
      port: 8000
      inMemory: true
    stages:
      - local

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x

  tracing:
    lambda: true
    apiGateway: true

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    TODOS_ID_INDEX: TodosIndexId
    ATTACHMENTS_BUCKET: p5-attachment-todo-bucket-as5d-${self:provider.stage}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
    environment:
      AUTH0_JWTK_URL: AUTO0_JWKS_URL


  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatementsName: api-lambda-GetTodos
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Query
        Resource: 
          - !GetAtt TodosDynamoDbTable.Arn
          - !Join [ /, [ !GetAtt TodosDynamoDbTable.Arn, "index/${self:provider.environment.TODOS_ID_INDEX}" ] ]

  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(src/requests/models/create-todo-request.json)}
    iamRoleStatementsName: api-lambda-CreateTodo
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt TodosDynamoDbTable.Arn

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(src/requests/models/update-todo-request.json)}
    iamRoleStatementsName: api-lambda-UpdateTodo
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt TodosDynamoDbTable.Arn

  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatementsName: api-lambda-DeleteTodo
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt TodosDynamoDbTable.Arn

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatementsName: api-lambda-GenerateUploadUrl
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - s3:PutObject
        Resource: !Join [ '/', [ !GetAtt AttachmentsS3Bucket.Arn, '*' ] ]
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt TodosDynamoDbTable.Arn

resources:
  - ${file(./resources/todosTable.yml)}
  - ${file(./resources/attachmentsS3Bucket.yml)}
    
    